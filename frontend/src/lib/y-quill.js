import * as Y from 'yjs';

/**
 * Binds a Y.Text type to a Quill editor.
 *
 * @param {Y.Text} ytext - The Yjs shared text type.
 * @param {Quill} quill - The Quill editor instance.
 */
export class QuillBinding {
  constructor(ytext, quill) {
    this.ytext = ytext;
    this.quill = quill;
    this._observeQuill = this.observeQuill.bind(this);
    this._observeYText = this.observeYText.bind(this);

    // Apply initial content from Yjs to Quill
    this.quill.setText(ytext.toString());

    // Observe changes in Quill and Y.Text
    this.quill.on('text-change', this._observeQuill);
    this.ytext.observe(this._observeYText);
  }

  /**
   * Observes changes in Quill and updates Y.Text accordingly.
   * 
   * @param {Object} delta - The delta change from Quill.
   * @param {Object} oldDelta - The previous delta from Quill.
   * @param {string} source - The source of the change (e.g., 'user', 'api').
   */
  observeQuill(delta, oldDelta, source) {
    if (source === 'user') {
      let index = this.quill.getSelection()?.index || 0;
      delta.ops.forEach((op) => {
        if (op.insert) {
          this.ytext.insert(index, op.insert);
          index += op.insert.length; // Update index after insert
        } else if (op.delete) {
          this.ytext.delete(index, op.delete);
        } else if (op.retain) {
          index += op.retain;
        }
      });
    }
  }

  /**
   * Observes changes in Y.Text and updates Quill accordingly.
   * 
   * @param {Y.Event} event - The event from Yjs.
   */
  observeYText(event) {
    const delta = event.delta;
    // Apply update to Quill only if it wasn't generated by Yjs itself
    if (this.quill.source !== 'yjs') {
      this.quill.updateContents(delta, 'yjs');
    }
  }

  /**
   * Destroy observers to prevent memory leaks.
   */
  destroy() {
    this.quill.off('text-change', this._observeQuill);
    this.ytext.unobserve(this._observeYText);
  }
}
